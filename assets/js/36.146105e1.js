(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{255:function(t,s,a){"use strict";a.r(s);var e=a(0),r=Object(e.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"mysql事务与隔离级别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql事务与隔离级别","aria-hidden":"true"}},[t._v("#")]),t._v(" MySQL事务与隔离级别")]),t._v(" "),a("h2",{attrs:{id:"事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务","aria-hidden":"true"}},[t._v("#")]),t._v(" 事务")]),t._v(" "),a("p",[t._v("事务是作为单个逻辑工作单元执行的一系列操作，通俗易懂的说就是一组原子性的 SQL 查询。Mysql 中事务的支持在存储引擎层，MyISAM 存储引擎不支持事务，而 InnoDB 支持，这是 Mysql 5.5.5 以后默认引擎由 MyISAM 换成 InnoDB 的最根本原因。")]),t._v(" "),a("h3",{attrs:{id:"事务的四大特性acid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务的四大特性acid","aria-hidden":"true"}},[t._v("#")]),t._v(" 事务的四大特性ACID")]),t._v(" "),a("p",[t._v("原子性（Atomicity）：作为逻辑工作单元，一个事务里的所有操作的执行，要么全部成功，要么全部失败。\n一致性（Consistency）：数据库从一个一致性状态变换到另外一个一致性状态，数据库的完整性不会受到破坏。\n隔离性（Isolation）：通常来说，一个事务所做的修改在最终提交前，对其他事务是不可见的。为什么是通常来说，为了提高事务的并发引出不同的隔离级别。\n持久性（Durability）：一旦事务提交，则其所做的修改就会永久保存到数据库中，即使系统故障，修改的数据也不会丢失。")]),t._v(" "),a("h3",{attrs:{id:"事务的提交与回滚"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务的提交与回滚","aria-hidden":"true"}},[t._v("#")]),t._v(" 事务的提交与回滚")]),t._v(" "),a("h4",{attrs:{id:"事务的自动提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务的自动提交","aria-hidden":"true"}},[t._v("#")]),t._v(" 事务的自动提交")]),t._v(" "),a("p",[t._v("Mysql 默认采用自动提交（AUTOCOMMIT)模式，也就是说，如果不显式地开始一个事务，则每个查询都被当做一个事务执行提交操作。 可以通过以下命令查看 mysql 是否打开自动提交")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("mysql> show variables like 'AUTOCOMMIT';\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| autocommit    | ON    |\n+---------------+-------+\n1 row in set (0.01 sec)\n--1 或者 ON 表示启用， 0 或者 OFF 表示禁用\nmysql> SET AUTOCOMMIT = 0/1; \n--以上命令可以打开和关闭自动提交\n")])])]),a("p",[t._v("通过 set autocommit = 0 关闭当前会话的自动提交，因为autocommit参数是针对连接的，在一个连接中修改了参数，不会对其他连接产生影响。如果需要对全局生效必须再配置文件中进行修改。")]),t._v(" "),a("p",[t._v("关闭自动提交后，用户的所有 DML 语句都会在同一个事务中，直到遇到 COMMIT 或 ROLLBACK 指令结束事务。")]),t._v(" "),a("h4",{attrs:{id:"事务的手动提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务的手动提交","aria-hidden":"true"}},[t._v("#")]),t._v(" 事务的手动提交")]),t._v(" "),a("p",[t._v("用户可以通过 start transaction 或者 begin 显式地开启一个事务。"),a("strong",[t._v("显式地开启事务会自动执行 set autocommit = 0，并在 commit 或 rollback 结束一个事务后执行 set autocommit = 1")]),t._v("，也就是说下一个事务又回到了自动提交更多事务的控制语句如下：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("START")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BEGIN")]),t._v("： 显式地开启一个事务；\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMIT")]),t._v("：也可以使用 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMIT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORK")]),t._v("，不过二者是等价的。"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMIT")]),t._v(" 会提交事务，并使已对数据库进行的所有修改成为永久性的；\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ROLLBACK")]),t._v("：也可以使用 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ROLLBACK")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORK")]),t._v("，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SAVEPOINT")]),t._v(" identifier："),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SAVEPOINT")]),t._v(" 允许在事务中创建一个保存点，一个事务中可以有多个 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SAVEPOINT")]),t._v("；\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RELEASE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SAVEPOINT")]),t._v(" identifier：删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ROLLBACK")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TO")]),t._v(" identifier：把事务回滚到标记点；\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),t._v("：用来设置事务的隔离级别。\n")])])]),a("h2",{attrs:{id:"隔离级别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隔离级别","aria-hidden":"true"}},[t._v("#")]),t._v(" 隔离级别")]),t._v(" "),a("p",[a("code",[t._v("MySQL")]),t._v("是一个服务器／客户端架构的软件，对于同一个服务器来说，可以有若干个客户端与之连接，每个客户端与服务器连接上之后，就可以称之为一个会话（"),a("code",[t._v("Session")]),t._v("）。我们可以同时在不同的会话里输入各种语句，这些语句可以作为事务的一部分进行处理。不同的会话可以同时发送请求，也就是说服务器可能同时在处理多个事务，这样子就会导致不同的事务可能同时访问到相同的记录。我们前边说过事务有一个特性称之为"),a("code",[t._v("隔离性")]),t._v("，理论上在某个事务对某个数据进行访问时，其他事务应该进行排队，当该事务提交之后，其他事务才可以继续访问这个数据。但是这样子的话对性能影响太大，所以设计数据库的大叔提出了各种"),a("code",[t._v("隔离级别")]),t._v("，来最大限度的提升系统并发处理事务的能力，但是这也是以牺牲一定的"),a("code",[t._v("隔离性")]),t._v("来达到的。")]),t._v(" "),a("h3",{attrs:{id:"查看innodb存储引擎系统级的隔离级别和会话级的隔离级别，命令和结果如下："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看innodb存储引擎系统级的隔离级别和会话级的隔离级别，命令和结果如下：","aria-hidden":"true"}},[t._v("#")]),t._v(" 查看InnoDB存储引擎系统级的隔离级别和会话级的隔离级别，命令和结果如下：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[t._v("mysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" @"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@global.tx_isolation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("@"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@tx_isolation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-----------------------+-----------------+")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" @"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@global.tx_isolation")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" @"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@tx_isolation")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-----------------------+-----------------+")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REPEATABLE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("READ")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REPEATABLE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("READ")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-----------------------+-----------------+")]),t._v("\n")])])]),a("h3",{attrs:{id:"设置innodb存储引擎隔离级别："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置innodb存储引擎隔离级别：","aria-hidden":"true"}},[t._v("#")]),t._v(" 设置InnoDB存储引擎隔离级别：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("global")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("session")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("isolation")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("level")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Read")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uncommitted")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Read")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("committed")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Repeatable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Serializable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 比如：")]),t._v("\n\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("session")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("isolation")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("level")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Serializable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nQuery OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rows")]),t._v(" affected "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.01")]),t._v(" sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" @"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@global.tx_isolation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("@"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@tx_isolation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-----------------------+----------------+")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" @"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@global.tx_isolation")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" @"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@tx_isolation")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-----------------------+----------------+")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REPEATABLE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("READ")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SERIALIZABLE")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-----------------------+----------------+")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("row")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00")]),t._v(" sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"脏读、不可重复读和幻读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#脏读、不可重复读和幻读","aria-hidden":"true"}},[t._v("#")]),t._v(" 脏读、不可重复读和幻读")]),t._v(" "),a("ol",[a("li",[t._v("脏读：当前事务(A)中可以读到其他事务(B)未提交的数据（脏数据），例如事务1修改某个字段的值，但未commit到数据库，然后事务2读取了该值，后来事务1撤销了对该字段的更新或者是更改该字段的值才commit到数据库。这样事务2读到的就是脏数据。")]),t._v(" "),a("li",[t._v("不可重复读：在事务A中先后两次读取同一个数据，两次读取的结果不一样，这种现象称为不可重复读。脏读与不可重复读的区别在于：前者读到的是其他事务未提交的数据，后者读到的是其他事务已提交的数据。")]),t._v(" "),a("li",[t._v("幻读：当某个事务在读取某个范围内的记录时，另外一个事务又在该范围内插入了新的记录，当之前的事务再次读取该范围的记录时，会产生幻行。InnoDB存储引擎通过多版本并发控制（MVCC）解决了幻读的问题。不可重复读与幻读的区别可以通俗的理解为：前者是数据变了，后者是数据的行数变了。")])]),t._v(" "),a("p",[t._v("原始数据：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    c "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Engine")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("InnoDB")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHARSET")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'刘备'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+--------+")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" c      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+--------+")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" 刘备   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+--------+")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("row")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.01")]),t._v(" sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"未提交读（read-uncommitted）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#未提交读（read-uncommitted）","aria-hidden":"true"}},[t._v("#")]),t._v(" 未提交读（READ UNCOMMITTED）")]),t._v(" "),a("p",[t._v("如果一个事务读到了另一个未提交事务修改过的数据，那么这种"),a("code",[t._v("隔离级别")]),t._v("就称之为"),a("code",[t._v("未提交读")]),t._v("（英文名："),a("code",[t._v("READ UNCOMMITTED")]),t._v("），示意图如下：\n"),a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/3/27/169bde35552fb49c",alt:""}})]),t._v(" "),a("p",[t._v("如上图，"),a("code",[t._v("Session A")]),t._v("和"),a("code",[t._v("Session B")]),t._v("各开启了一个事务，"),a("code",[t._v("Session B")]),t._v("中的事务先将"),a("code",[t._v("id")]),t._v("为"),a("code",[t._v("1")]),t._v("的记录的列"),a("code",[t._v("c")]),t._v("更新为"),a("code",[t._v("'关羽'")]),t._v("，然后"),a("code",[t._v("Session A")]),t._v("中的事务再去查询这条"),a("code",[t._v("id")]),t._v("为"),a("code",[t._v("1")]),t._v("的记录，那么在"),a("code",[t._v("未提交读")]),t._v("的隔离级别下，查询结果就是"),a("code",[t._v("'关羽'")]),t._v("，也就是说某个事务读到了另一个未提交事务修改过的记录。但是如果"),a("code",[t._v("Session B")]),t._v("中的事务稍后进行了回滚，那么"),a("code",[t._v("Session A")]),t._v("中的事务相当于读到了一个不存在的数据，这种现象就称之为"),a("code",[t._v("脏读")]),t._v("，就像这个样子：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/3/27/169bde35541a8e49",alt:""}}),t._v("\n脏读违背了现实世界的业务含义，所以这种READ UNCOMMITTED算是十分不安全的一种隔离级别。")]),t._v(" "),a("h3",{attrs:{id:"已提交读（read-committed）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#已提交读（read-committed）","aria-hidden":"true"}},[t._v("#")]),t._v(" 已提交读（READ COMMITTED）")]),t._v(" "),a("p",[t._v("如果一个事务只能读到另一个已经提交的事务修改过的数据，并且其他事务每对该数据进行一次修改并提交后，该事务都能查询得到最新值，那么这种隔离级别就称之为已提交读（英文名：READ COMMITTED），如图所示：\n"),a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/3/27/169bde3557ef6578",alt:""}})]),t._v(" "),a("p",[t._v("从图中可以看到，第4步时，由于"),a("code",[t._v("Session B")]),t._v("中的事务尚未提交，所以"),a("code",[t._v("Session A")]),t._v("中的事务查询得到的结果只是"),a("code",[t._v("'刘备'")]),t._v("，而第6步时，由于"),a("code",[t._v("Session B")]),t._v("中的事务已经提交，所以"),a("code",[t._v("Session B")]),t._v("中的事务查询得到的结果就是"),a("code",[t._v("'关羽'")]),t._v("了。")]),t._v(" "),a("p",[t._v("对于某个处在在"),a("code",[t._v("已提交读")]),t._v("隔离级别下的事务来说，只要其他事务修改了某个数据的值，并且之后提交了，那么该事务就会读到该数据的最新值，比方说：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/3/27/169bde356084eb69",alt:""}})]),t._v(" "),a("p",[t._v("我们在"),a("code",[t._v("Session B")]),t._v("中提交了几个隐式事务，这些事务都修改了"),a("code",[t._v("id")]),t._v("为"),a("code",[t._v("1")]),t._v("的记录的列c的值，每次事务提交之后，"),a("code",[t._v("Session A")]),t._v("中的事务都可以查看到最新的值。这种现象也被称之为"),a("code",[t._v("不可重复读")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"可重复读（repeatable-read）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可重复读（repeatable-read）","aria-hidden":"true"}},[t._v("#")]),t._v(" 可重复读（REPEATABLE READ）")]),t._v(" "),a("p",[t._v("在一些业务场景中，一个事务只能读到另一个已经提交的事务修改过的数据，但是第一次读过某条记录后，即使其他事务修改了该记录的值或者新增了新的记录并且提交，该事务之后再读该条记录时，读到的仍是第一次读到的值，而不是每次都读到不同的数据。那么这种隔离级别就称之为可重复读（英文名：REPEATABLE READ），如图所示：\n"),a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/3/27/169bde35523d0ae5",alt:""}})]),t._v(" "),a("p",[t._v("从图中可以看出来，"),a("code",[t._v("Session A")]),t._v("中的事务在第一次读取"),a("code",[t._v("id")]),t._v("为"),a("code",[t._v("1")]),t._v("的记录时，列"),a("code",[t._v("c")]),t._v("的值为"),a("code",[t._v("'刘备'")]),t._v("，之后虽然"),a("code",[t._v("Session B")]),t._v("中隐式提交了多个事务，每个事务都修改了这条记录，但是"),a("code",[t._v("Session A")]),t._v("中的事务读到的列"),a("code",[t._v("c")]),t._v("的值仍为"),a("code",[t._v("'刘备'")]),t._v("，与第一次读取的值是相同的。")]),t._v(" "),a("p",[t._v("这时候如果在Session B中新增一条数据，并提交，数据库中实际上有两条数据：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'曹操'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("而Session A由于重复读的原因，还是读到只有一条数据，此时如果Session A想往数据库中插入一条数据：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'孙权'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("但是会报错：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Duplicate")]),t._v(" entry "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("key")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'PRIMARY'")]),t._v("\n")])])]),a("p",[t._v("此时对于Session A 来说出现的报错就像见鬼了一样，因为事务 A 在查询 t 表的结果并不存在 "),a("code",[t._v("id")]),t._v(" 为 2 的行！而在插入该行时却出现了该行已存在的报错，就像出现了幻觉……也许这就是叫幻读的原因吧。")]),t._v(" "),a("p",[t._v("另外，MySQL默认的隔离级别是可重复读(REPEATABLE READ)，简称为RR，在SQL标准中，RR是无法避免幻读问题的，但是InnoDB实现的RR避免了幻读问题。")]),t._v(" "),a("h3",{attrs:{id:"串行化（serializable）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#串行化（serializable）","aria-hidden":"true"}},[t._v("#")]),t._v(" 串行化（SERIALIZABLE）")]),t._v(" "),a("p",[t._v("以上3种隔离级别都允许对同一条记录进行读-读、读-写、写-读的并发操作，如果我们不允许读-写、写-读的并发操作，可以使用SERIALIZABLE隔离级别，示意图如下：\n"),a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/3/27/169bde3556310c02",alt:""}})]),t._v(" "),a("p",[t._v("如图所示，当"),a("code",[t._v("Session B")]),t._v("中的事务更新了"),a("code",[t._v("id")]),t._v("为"),a("code",[t._v("1")]),t._v("的记录后，之后"),a("code",[t._v("Session A")]),t._v("中的事务再去访问这条记录时就被卡住了，直到"),a("code",[t._v("Session B")]),t._v("中的事务提交之后，"),a("code",[t._v("Session A")]),t._v("中的事务才可以获取到查询结果。")]),t._v(" "),a("p",[t._v("串行化强制事务串行，并发效率很低，只有当对数据一致性要求极高且可以接受没有并发时使用，因此使用也较少。")]),t._v(" "),a("h3",{attrs:{id:"mysql-事务隔离级别和允许并发副作用，分别如下表："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-事务隔离级别和允许并发副作用，分别如下表：","aria-hidden":"true"}},[t._v("#")]),t._v(" MySql 事务隔离级别和允许并发副作用，分别如下表：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("隔离级别")]),t._v(" "),a("th",[t._v("脏读")]),t._v(" "),a("th",[t._v("不可重复读")]),t._v(" "),a("th",[t._v("幻读")]),t._v(" "),a("th",[t._v("第一类更新丢失")]),t._v(" "),a("th",[t._v("第二类更新丢失")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("未提交读")]),t._v(" "),a("td",[t._v("会")]),t._v(" "),a("td",[t._v("会")]),t._v(" "),a("td",[t._v("会")]),t._v(" "),a("td",[t._v("不会")]),t._v(" "),a("td",[t._v("会")])]),t._v(" "),a("tr",[a("td",[t._v("已提交读")]),t._v(" "),a("td",[t._v("不会")]),t._v(" "),a("td",[t._v("会")]),t._v(" "),a("td",[t._v("会")]),t._v(" "),a("td",[t._v("不会")]),t._v(" "),a("td",[t._v("会")])]),t._v(" "),a("tr",[a("td",[t._v("重复读")]),t._v(" "),a("td",[t._v("不会")]),t._v(" "),a("td",[t._v("不会")]),t._v(" "),a("td",[t._v("会")]),t._v(" "),a("td",[t._v("不会")]),t._v(" "),a("td",[t._v("不会")])]),t._v(" "),a("tr",[a("td",[t._v("串行化")]),t._v(" "),a("td",[t._v("不会")]),t._v(" "),a("td",[t._v("不会")]),t._v(" "),a("td",[t._v("不会")]),t._v(" "),a("td",[t._v("不会")]),t._v(" "),a("td",[t._v("不会")])])])]),t._v(" "),a("h3",{attrs:{id:"mysql的mvcc机制："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql的mvcc机制：","aria-hidden":"true"}},[t._v("#")]),t._v(" MySQL的MVCC机制：")]),t._v(" "),a("p",[t._v("Mysql 的事务型存储引擎（InnoDB）使用 MVCC（Multi-Version Concurrency Control，多版本并发控制）代替行级锁来提高并发读写的性能。InnoDB 的 MVCC 原理比较简单，它通过在在每行记录后面保存三个隐藏列（事务 id，行的创建的版本号、行的过期版本号）来实现的，下面是 InnoDB 在 REPEATABLE READ 隔离级别下 MVCC 的简化工作原理：\nINSERT: InnoDB 为新插入的每一行保存当前系统版本号作为行版本号。\nUPDATE: InnoDB为插入一行新记录，保存当前系统版本号作为行版本号，同时保存当前系统版本号到原来的行作为行删除标识。\nDELETE: InnoDB为删除的每一行保存当前系统版本号作为行删除标识。\nSELECT: InnoDB会根据以下两个条件检查每行记录：")]),t._v(" "),a("p",[t._v("InnoDB只查找版本早于当前事务版本的数据行（也就是，行的系统版本号小于或等于事务的系统版本号），这样可以确保事务读取的行，要么是在事务开始前已经存在的，要么是事务自身插入或者修改过的。\n行的删除版本要么未定义，要么大于当前事务版本号。这可以确保事务读取到的行，在事务开始之前未被删除。")]),t._v(" "),a("p",[t._v("只有符合上述两个条件的记录，才能返回作为查询结果。")]),t._v(" "),a("h2",{attrs:{id:"reference"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reference","aria-hidden":"true"}},[t._v("#")]),t._v(" Reference")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.im/post/5d7dd7e7f265da03d60f2f56",target:"_blank",rel:"noopener noreferrer"}},[a("OutboundLink")],1)]),t._v(" "),a("p",[a("router-link",{attrs:{to:"/后端/[https://fdx321.github.io/2016/09/09/MySQL事务学习总结/#more](https://fdx321.github.io/2016/09/09/MySQL事务学习总结/#more)"}})],1),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.im/post/5c9b1b7df265da60e21c0b57",target:"_blank",rel:"noopener noreferrer"}},[a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000012469586",target:"_blank",rel:"noopener noreferrer"}},[a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.im/post/5c9cb91d5188251cea0abbd7",target:"_blank",rel:"noopener noreferrer"}},[a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.jianshu.com/p/b080fe41f626",target:"_blank",rel:"noopener noreferrer"}},[a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.im/post/5ba0c3a6e51d450e597b2fb4",target:"_blank",rel:"noopener noreferrer"}},[a("OutboundLink")],1)])])},[],!1,null,null,null);s.default=r.exports}}]);
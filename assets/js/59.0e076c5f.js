(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{268:function(v,_,a){"use strict";a.r(_);var t=a(0),r=Object(t.a)({},function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("p",[a("strong",[v._v("数据结构+算法＝程序")])]),v._v(" "),a("h2",{attrs:{id:"基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本概念","aria-hidden":"true"}},[v._v("#")]),v._v(" 基本概念")]),v._v(" "),a("p",[v._v("数据结构表示数据在计算机中的存储和组织形式，主要描述数据元素之间和位置关系等。选择适当的数据结构可以提高计算机程序的运行效率（时间复杂度）和存储效率（空间复杂度）。")]),v._v(" "),a("h2",{attrs:{id:"数据结构的三种层次"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据结构的三种层次","aria-hidden":"true"}},[v._v("#")]),v._v(" 数据结构的三种层次")]),v._v(" "),a("h3",{attrs:{id:"逻辑结构："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑结构：","aria-hidden":"true"}},[v._v("#")]),v._v(" 逻辑结构：")]),v._v(" "),a("p",[v._v("主要描述的是数据元素之间的逻辑关系")]),v._v(" "),a("ul",[a("li",[v._v("集合结构：所有的元素都属于一个总体，除了同属于一个集合外没有其他关系。集合结构不强调元素之间的任何关联性。")]),v._v(" "),a("li",[v._v("线性结构：数据元素之间具有一对一的前后关系。结构中必须存在唯一的首元素和唯一的尾元素，其他元素都有一个直接前驱和一个直接后继。")]),v._v(" "),a("li",[v._v("树形结构：元素之间具有一对多的关系")]),v._v(" "),a("li",[v._v("图形结构：存在多对多的关系")])]),v._v(" "),a("h3",{attrs:{id:"物理结构（存储结构）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#物理结构（存储结构）","aria-hidden":"true"}},[v._v("#")]),v._v(" 物理结构（存储结构）:")]),v._v(" "),a("p",[v._v("主要描述的是数据元素之间的位置关系")]),v._v(" "),a("ol",[a("li",[a("p",[v._v("顺序结构： 顺序结构就是使用一组连续的存储单元依次存储逻辑上相邻的各个元素")]),v._v(" "),a("ol",[a("li",[v._v("优点： 只需要申请存放数据本身的内存空间即可，支持下标访问，也可以实现随机访问。")]),v._v(" "),a("li",[v._v("缺点： 必须静态分配连续空间，内存空间的利用率比较低。插入或删除可能需要移动大量元素，效率比较低")])])]),v._v(" "),a("li",[a("p",[v._v("链式结构： 链式存储结构不使用连续的存储空间存放结构的元素，而是为每一个元素构造一个节点。节点中除了存放数据本身以外，还需要存放指向下一个节点的指针。")]),v._v(" "),a("ol",[a("li",[v._v("优点：   不采用连续的存储空间导致内存空间利用率比较高，克服顺序存储结构中预知元素个数的缺点，插入或删除元素时，不需要移动大量的元素。")]),v._v(" "),a("li",[v._v("缺点： 需要额外的空间来表达数据之间的逻辑关系，\n不支持下标访问和随机访问。")])])]),v._v(" "),a("li",[a("p",[v._v("索引结构： 除建立存储节点信息外，还建立附加的索引表来标节点的地址。索引表由若干索引项组成。")]),v._v(" "),a("ol",[a("li",[v._v("优点：   是用节点的索引号来确定结点存储地址，检索速度块")]),v._v(" "),a("li",[v._v("缺点：  增加了附加的索引表,会占用较多的存储空间。")])])]),v._v(" "),a("li",[a("p",[v._v("散列结构： 由节点的关键码值决定节点的存储地址。散列技术除了可以用于查找外，还可以用于存储。")]),v._v(" "),a("ol",[a("li",[v._v("优点：   散列是数组存储方式的一种发展，采用存储数组中内容的部分元素作为映射函数的输入，映射函数的输出就是存储数据的位置,  相比数组，散列的数据访问速度要高于数组")]),v._v(" "),a("li",[v._v("缺点： 不支持排序，一般比用线性表存储需要更多的空间，并且记录的关键字不能重复。")])])])]),v._v(" "),a("h3",{attrs:{id:"数据的运算："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据的运算：","aria-hidden":"true"}},[v._v("#")]),v._v(" 数据的运算：")]),v._v(" "),a("p",[v._v("主要是指元素的查询、遍历、插入、删除、修改及排序等操作")]),v._v(" "),a("h2",{attrs:{id:"算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法","aria-hidden":"true"}},[v._v("#")]),v._v(" 算法")]),v._v(" "),a("p",[v._v("解决问题的方案\n特性：")]),v._v(" "),a("h2",{attrs:{id:"线性结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线性结构","aria-hidden":"true"}},[v._v("#")]),v._v(" 线性结构")]),v._v(" "),a("h3",{attrs:{id:"线性表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线性表","aria-hidden":"true"}},[v._v("#")]),v._v(" 线性表")]),v._v(" "),a("ol",[a("li",[a("p",[v._v("顺序表：\n存储地址空间连续的线性表，相同数据类型的元素按一定顺序排列的集合，是一块连续的内存空间，使用"),a("strong",[v._v("数组")]),v._v("作为案例")]),v._v(" "),a("ol",[a("li",[v._v("从数组中查找数据：\n"),a("ol",[a("li",[v._v("按照索引查找：元素所在位置 = 第一个元素的起始位置 + 元素变量所占的字节 * 元素的索引数，时间复杂度为o(1)")]),v._v(" "),a("li",[v._v("不按照索引查找：\n"),a("ol",[a("li",[v._v("数组无序：只能遍历，挨个查找，时间复杂度为o(N)，效率太低")]),v._v(" "),a("li",[v._v("数组有序：可以使用二分法查找，时间复杂度为o(log~2~N)，按照二分查找的方式，查找10亿数据只需要30次左右")])])])])]),v._v(" "),a("li",[v._v("在元素的增加或者删除上，大部分情况下均需要完成元素的移动，（如果增加或者删除的是最后一个元素，则不需要移动元素），时间复杂度是o(N)")])])]),v._v(" "),a("li",[a("p",[v._v("链表\n链表是一种非连续、非顺序的结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的，链表由一系列结点组成。")])]),v._v(" "),a("li",[a("p",[v._v("单向链表：每个节点只有一个指针域，指向下一个节点，并且最后一个节点指向null。\n缺点：查找元素效率低，因为各个节点的地址完全没有规律可寻，只能是“顺藤摸瓜”地查找，从第一个找第二个，再第二个找第三个。。。\n2. 双向链表： 每个节点具有两个指针 p、n，使得 p 指向先前节点并且 n 指向下一个节点；最后一个节点的 n 指针指向 null。\n3. 循环链表：每个节点指向下一个节点并且最后一个节点指向第一个节点的链表。")])])]),v._v(" "),a("h3",{attrs:{id:"栈、队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈、队列","aria-hidden":"true"}},[v._v("#")]),v._v(" 栈、队列")]),v._v(" "),a("p",[v._v("操作受限制的线性表，既然是线性表，可以使用顺序存储，也可以使用链式存储")]),v._v(" "),a("ol",[a("li",[v._v("栈：先进后出")]),v._v(" "),a("li",[v._v("队列：先进先出")]),v._v(" "),a("li",[v._v("双端队列：两端都可以进行入队出队的操作，同时也可以只允许某一端只进行入队或者出队或者不操作，当某一端不允许操作时，变成了栈")])])])},[],!1,null,null,null);_.default=r.exports}}]);
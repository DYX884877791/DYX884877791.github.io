(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{222:function(a,o,e){a.exports=e.p+"assets/img/hadoop.dc6fd002.jpg"},223:function(a,o,e){a.exports=e.p+"assets/img/HDFS.a06222dd.png"},224:function(a,o,e){a.exports=e.p+"assets/img/YARN1.fbfaaa5b.png"},225:function(a,o,e){a.exports=e.p+"assets/img/YARN2.609c807c.png"},226:function(a,o,e){a.exports=e.p+"assets/img/mapreduce.7122028f.png"},227:function(a,o,e){a.exports=e.p+"assets/img/1.b6d73e51.png"},308:function(a,o,e){"use strict";e.r(o);var t=e(0),v=Object(t.a)({},function(){var a=this,o=a.$createElement,t=a._self._c||o;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"hadoop生态系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hadoop生态系统","aria-hidden":"true"}},[a._v("#")]),a._v(" Hadoop生态系统")]),a._v(" "),t("h2",{attrs:{id:"hadoop是什么？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hadoop是什么？","aria-hidden":"true"}},[a._v("#")]),a._v(" Hadoop是什么？")]),a._v(" "),t("ol",[t("li",[a._v("Hadoop是一个由Apache基金会（ASF）所开发的分布式系统基础框架，Hadoop生态中的大部分框架都依赖于Hadoop")]),a._v(" "),t("li",[a._v("主要解决：海量数据的存储和海量数据的分析计算")]),a._v(" "),t("li",[a._v("Hadoop泛指一个更广泛的概念---Hadoop生态圈")])]),a._v(" "),t("h2",{attrs:{id:"hadoop发展历史"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hadoop发展历史","aria-hidden":"true"}},[a._v("#")]),a._v(" Hadoop发展历史")]),a._v(" "),t("ol",[t("li",[a._v("Lucene框架(Doug Cutting)---全文检索引擎，2001年底成为ASF的一个子项目")]),a._v(" "),t("li",[a._v("基于Lucene实现搜索引擎Nutch")]),a._v(" "),t("li",[a._v("Google三篇论文\n"),t("ul",[t("li",[a._v("GFS --\x3e HDFS")]),a._v(" "),t("li",[a._v("Map --\x3e MapReduce")]),a._v(" "),t("li",[a._v("BigTable --\x3e HBase")])])]),a._v(" "),t("li",[a._v("基于Google三篇论文优化Nutch，性能飙升，并由此诞生出Hadoop")]),a._v(" "),t("li",[a._v("Hadoop作为ASF的顶级项目")]),a._v(" "),t("li",[t("img",{attrs:{src:e(222),alt:"Hadoop发展历史"}})])]),a._v(" "),t("h2",{attrs:{id:"hadoop的三大发行版本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hadoop的三大发行版本","aria-hidden":"true"}},[a._v("#")]),a._v(" Hadoop的三大发行版本")]),a._v(" "),t("ul",[t("li",[a._v("Apache Hadoop版本：最原始版本，方便入门学习")]),a._v(" "),t("li",[a._v("Cloudera版本：Hadoop商用版本，行业内使用较多，CDH -- Cloudera Hadoop发行版，功能上有所增强，兼容性提高")]),a._v(" "),t("li",[a._v("Hortonworks：Yahoo! 公司出资创建，使用较少")])]),a._v(" "),t("h2",{attrs:{id:"hadoop的优势"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hadoop的优势","aria-hidden":"true"}},[a._v("#")]),a._v(" Hadoop的优势")]),a._v(" "),t("ul",[t("li",[a._v("高可靠性：Hadoop底层维护了多个数据副本，所以即使Hadoop某个计算元素或存储出现故障，也不会导致数据的丢失")]),a._v(" "),t("li",[a._v("高扩展性：在集群间分配任务数据，可以方便地扩展数以千计的节点")]),a._v(" "),t("li",[a._v("高效性：在MapReduce思想下，Hadoop是并行工作的，可以加快任务处理的速度")]),a._v(" "),t("li",[a._v("高容错性：能够自动将失败的任务重新分配")])]),a._v(" "),t("h2",{attrs:{id:"hadoop的组成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hadoop的组成","aria-hidden":"true"}},[a._v("#")]),a._v(" Hadoop的组成")]),a._v(" "),t("h3",{attrs:{id:"hadoop基本组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hadoop基本组件","aria-hidden":"true"}},[a._v("#")]),a._v(" Hadoop基本组件")]),a._v(" "),t("ul",[t("li",[a._v("Hadoop 1.x组成：\n"),t("ul",[t("li",[a._v("Hadoop Common：辅助工具")]),a._v(" "),t("li",[a._v("HDFS：数据存储")]),a._v(" "),t("li",[a._v("MapReduce：计算 + 资源调度")])])]),a._v(" "),t("li",[a._v("Hadoop 2.x组成：\n"),t("ul",[t("li",[a._v("Hadoop Common：辅助工具")]),a._v(" "),t("li",[a._v("HDFS：数据存储")]),a._v(" "),t("li",[a._v("Yarn：资源调度")]),a._v(" "),t("li",[a._v("MapReduce：只负责计算，资源调度部分交由yarn负责")])])]),a._v(" "),t("li",[a._v("Hadoop 1.x与2.x的区别：在Hadoop 1.x中，MapReduce既负责并行运算，还负责资源的调度，耦合性比较大，而在Hadoop 2.x中，增加了Yarn，资源调度由Yarn负责，而MapReduce只负责运算")])]),a._v(" "),t("h3",{attrs:{id:"hdfs架构概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hdfs架构概述","aria-hidden":"true"}},[a._v("#")]),a._v(" HDFS架构概述")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("HDFS是一种master/slave的架构。一个HDFS集群包含一个唯一的NameNode，这个master server管理着整个文件系统的命名空间并且调节客户端对文件的访问。同时，还拥有一系列的DataNode，每个都管理着他们运行的对应节点的数据存储。HDFS提供了一个文件系统的命名空间同时允许用户将数据存在这些文件上。通常，一个文件被拆分成一个或多个数据块，并且这些数据块被保存在一系列的DataNode上。NameNode执行文件系统的命名空间的相关操作比如打开、关闭、重命名目录或者文件。同时决定了数据块到DataNode的映射。DataNode为客户端的读取写入需求提供服务，同时处理NameNode发来的数据块的创建、删除、复制等需求。")])]),a._v(" "),t("li",[t("p",[a._v("由三个组件构成：")]),a._v(" "),t("ul",[t("li",[a._v("NameNode(NN)：存储文件的元数据，比如文件名、文件目录结构、文件属性（生成时间，副本数量、文件权限）、以及每个文件的快列表和块所在的DataNode等")]),a._v(" "),t("li",[a._v("DataNode(DN)：在本地文件系统存储文件块数据，以及块数据的校验和")]),a._v(" "),t("li",[a._v("Secondary NameNode(2NN)：用来监控HDFS状态的辅助程序，每隔一段时间获取HDFS元数据的快照")])])]),a._v(" "),t("li",[t("p",[a._v("HDFS架构:"),t("img",{attrs:{src:e(223),alt:"HDFS架构概述"}})])])]),a._v(" "),t("h3",{attrs:{id:"yarn架构概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#yarn架构概述","aria-hidden":"true"}},[a._v("#")]),a._v(" Yarn架构概述")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("Yarn是一种新的 Hadoop 资源管理器，它是一个通用资源管理系统，YARN的基本思想是将JobTracker的两个主要功能（资源管理和作业调度/监控）分离，主要方法是创建一个全局的ResourceManager（RM）和若干个针对应用程序的ApplicationMaster（AM）。")])]),a._v(" "),t("li",[t("p",[a._v("运行在独立节点上的RM和NM一起组成了YARN的核心且构成了这个平台。AM和相应的Container一起组成了一个Yarn的应用程序。从YARN的角度来看，所有用户通过提交应用程序，然后利用该平台提供的资源来进行交互。从最终用户的角度看，他们可能是直接在YARN平台上通过运用应用程序和YARN进行交互。")])]),a._v(" "),t("li",[t("p",[a._v("由四个组件构成：")]),a._v(" "),t("ul",[t("li",[a._v("ResourceManager(RM)：RM作为一个独立的守护进程运行在专有机器上，RM拥有集群上所有资源的信息，是集群所有资源的仲裁者，只负责给应用进行资源的划分和资源的收回。这里的资源主要指：内存，带宽，内核数等。\n"),t("ul",[t("li",[a._v("管理整个集群中的资源（CPU、内存等）")]),a._v(" "),t("li",[a._v("处理客户端请求")]),a._v(" "),t("li",[a._v("监控NodeManager")]),a._v(" "),t("li",[a._v("启动或监控ApplicationMaster")])])]),a._v(" "),t("li",[a._v("NodeManager(NM):管理集群中独立的计算节点。NM是每个节点上的资源和任务管理器。一方面，它会定时地向RM汇报本节点上的资源使用情况和各个Container运行状态；另一方面，它接收并处理来自AM的 Container 启动/停止等各种请求。\n"),t("ul",[t("li",[a._v("管理单个节点上的资源")]),a._v(" "),t("li",[a._v("处理来自于ResourceManager的命令")]),a._v(" "),t("li",[a._v("处理来自于ApplicationMaster的命令")])])]),a._v(" "),t("li",[a._v("ApplicationMaster(AM):ApplicationMaster管理一个在YARN内运行的应用程序的每个实例，每个应用程序对应唯一一个AM。 负责管理作业的生命周期，包括动态的增加和减少资源使用，管理作业执行流程，处理故障和计算偏差，以及执行其本地优化。\n"),t("ul",[t("li",[a._v("负责数据的切分")]),a._v(" "),t("li",[a._v("为应用程序申请资源并分配给内部的任务，每个应用对应一个ApplicationMaster，负责管理作业的生命周期，包括动态的增加和减少资源使用，管理作业执行流程，处理故障和计算偏差，以及执行其本地优化。")]),a._v(" "),t("li",[a._v("任务的监控与容错")])])]),a._v(" "),t("li",[a._v("Container:一个节点可以有一个或者多个container，当AM向RM申请资源时，RM为AM返回的资源便是用Container表示的。其中AM可以看做是一种特殊的Container。container由NM监控，RM调度。\n"),t("ul",[t("li",[a._v("Container是Yarn中的资源抽象，它封装了某个节点上的多维度资源，如CPU、内存、硬盘、网络等")])])])])]),a._v(" "),t("li",[t("p",[a._v("客户端与资源管理器交互:"),t("img",{attrs:{src:e(224),alt:""}})])]),a._v(" "),t("li",[t("p",[a._v("应用管理器与节点管理器交互:"),t("img",{attrs:{src:e(225),alt:""}})])])]),a._v(" "),t("h3",{attrs:{id:"mapreduce架构概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mapreduce架构概述","aria-hidden":"true"}},[a._v("#")]),a._v(" MapReduce架构概述")]),a._v(" "),t("p",[a._v("MapRecude将计算过程分为两个阶段，Map和Reduce")]),a._v(" "),t("ol",[t("li",[a._v("Map阶段并行处理输入数据")]),a._v(" "),t("li",[a._v("Reduce阶段对Map的输出结果进行汇总\n"),t("img",{attrs:{src:e(226),alt:""}})])]),a._v(" "),t("h2",{attrs:{id:"大数据技术生态体系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#大数据技术生态体系","aria-hidden":"true"}},[a._v("#")]),a._v(" 大数据技术生态体系")]),a._v(" "),t("p",[t("img",{attrs:{src:e(227),alt:""}})]),a._v(" "),t("ol",[t("li",[a._v("Sqoop：sqoop 是一款开源的工具，主要用于在 Hadoop(Hive)与传统的数据库(mysql)间进行数据的传递，可以将一个关系型数据库（例如 ： MySQL ,Oracle 等）中的数据导进到 Hadoop 的 HDFS 中，也可以将 HDFS 的数据导进到关系型数据库中。")]),a._v(" "),t("li",[a._v("Flume：Flume 是 Cloudera 提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume 支持在日志系统中定制各类数据发送方，用于收集数据；同时，Flume 提供对数据进行简单处理，并写到各种数据接受方（可定制）的能力。")]),a._v(" "),t("li",[a._v("Kafka：Kafka 是一种高吞吐量的分布式发布订阅消息系统，有如下特性：\n"),t("ul",[t("li",[a._v("通过 O(1)的磁盘数据结构提供消息的持久化，这种结构对于即使数以 TB 的消息 存储也能够保持长时间的稳定性能")]),a._v(" "),t("li",[a._v("高吞吐量：即使是非常普通的硬件 Kafka 也可以支持每秒数百万的消息")]),a._v(" "),t("li",[a._v("支持通过 Kafka 服务器和消费机集群来分区消息")]),a._v(" "),t("li",[a._v("支持 Hadoop 并行数据加载")])])]),a._v(" "),t("li",[a._v("Storm：Storm 为分布式实时计算提供了一组通用原语，可被用于“流处理”之中，实时 处理消息并更新数据库。这是管理队列及工作者集群的另一种方式。 Storm 也可被用于“连 续计算”（continuous computation），对数据流做连续查询，在计算时就将结果以流的形式 输出给用户。")]),a._v(" "),t("li",[a._v("Spark：Spark 是当前最流行的开源大数据内存计算框架。可以基于 Hadoop 上存储的大 数据进行计算。")]),a._v(" "),t("li",[a._v("Oozie：Oozie 是一个管理 Hdoop 作业（job）的工作流程调度管理系统。Oozie 协调作业 就是通过时间（频率）和有效数据触发当前的 Oozie 工作流程。")]),a._v(" "),t("li",[a._v("Hbase：HBase 是一个分布式的、面向列的开源数据库。HBase 不同于一般的关系数据库， 它是一个适合于非结构化数据存储的数据库。")]),a._v(" "),t("li",[a._v("Hive：hive 是基于 Hadoop 的一个数据仓库工具，可以将结构化的数据文件映射为一张 数据库表，并提供简单的 sql 查询功能，可以将 sql 语句转换为 MapReduce 任务进行运行。 其优点是学习成本低，可以通过类 SQL 语句快速实现简单的 MapReduce 统计，不必开发专 门的 MapReduce 应用，十分适合数据仓库的统计分析。 9）R 语言：R 是用于统计分析、绘图的语言和操作环境。R 是属于 GNU 系统的一个自由、 免费、源代码开放的软件，它是一个用于统计计算和统计制图的优秀工具。")]),a._v(" "),t("li",[a._v("Mahout: Apache Mahout 是个可扩展的机器学习和数据挖掘库，当前 Mahout 支持主要的 4 个用 例： 推荐挖掘：搜集用户动作并以此给用户推荐可能喜欢的事物。 聚集：收集文件并进行相关文件分组。 分类：从现有的分类文档中学习，寻找文档中的相似特征，并为无标签的文档进行正确 的归类。 频繁项集挖掘：将一组项分组，并识别哪些个别项会经常一起出现。")]),a._v(" "),t("li",[a._v("ZooKeeper：Zookeeper 是 Google 的 Chubby 一个开源的实现。它是一个针对大型分布 式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、 分布式同步、组服务等。 ZooKeeper 的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能 稳定的系统提供给用户")])]),a._v(" "),t("h2",{attrs:{id:"推荐系统项目框架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#推荐系统项目框架","aria-hidden":"true"}},[a._v("#")]),a._v(" 推荐系统项目框架")])])},[],!1,null,null,null);o.default=v.exports}}]);
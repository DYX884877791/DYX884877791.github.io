(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{269:function(t,v,_){"use strict";_.r(v);var a=_(0),i=Object(a.a)({},function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"数据结构与算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据结构与算法","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据结构与算法")]),t._v(" "),_("h2",{attrs:{id:"数据结构和算法的关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据结构和算法的关系","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据结构和算法的关系")]),t._v(" "),_("ul",[_("li",[t._v("数据data结构(structure)是一门研究组织数据方式的学科，有了编程语言也就有了数据结构.学好数据结构可以编写出更加漂亮,更加有效率的代码")]),t._v(" "),_("li",[t._v("要学习好数据结构就要多多考虑如何将生活中遇到的问题,用程序去实现解决.")]),t._v(" "),_("li",[t._v("程序 = 数据结构 + 算法")]),t._v(" "),_("li",[t._v("数据结构是算法的基础, 换言之，想要学好算法，需要把数据结构学到位。")])]),t._v(" "),_("h2",{attrs:{id:"数据结构和算法的重要性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据结构和算法的重要性","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据结构和算法的重要性")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("算法是程序的灵魂，优秀的程序可以在海量数据计算时，依然保持高速计算")])]),t._v(" "),_("li",[_("p",[t._v("一般来讲 程序会使用了内存计算框架(比如Spark)和缓存技术(比如Redis等)来优化程序,再深入的思考一下，这些计算框架和缓存技术， 它的核心功能是哪个部分呢？")])]),t._v(" "),_("li",[_("p",[t._v("拿实际工作经历来说, 在Unix下开发服务器程序，功能是要支持上千万人同时在线， 在上线前，做内测，一切OK,可上线后，服务器就支撑不住了, 公司的CTO对代码进行优化，再次上线，坚如磐石。你就能感受到程序是有灵魂的，就是算法。")])]),t._v(" "),_("li",[_("p",[t._v("目前程序员面试的门槛越来越高，很多一线IT公司(大厂)，都会有数据结构和算法面试题(负责的告诉你，肯定有的)")])]),t._v(" "),_("li",[_("p",[t._v("如果你不想永远都是代码工人,那就花时间来研究下数据结构和算法")])])]),t._v(" "),_("h2",{attrs:{id:"几个实际编程的问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#几个实际编程的问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 几个实际编程的问题")]),t._v(" "),_("ol",[_("li",[t._v("试写出用单链表表示的字符串类及字符串结点类的定义，并依次实现它的构造函数、以及计算串长度、串赋值、判断两串相等、求子串、两串连接、求子串在串中位置等7个成员函数。")]),t._v(" "),_("li",[t._v("如何判断游戏的输赢，并可以完成存盘退出和继续上局的功能：\n"),_("ul",[_("li",[t._v("棋盘:二维数组 -> 稀疏数组 -> 写入文件")]),t._v(" "),_("li",[t._v("存档功能:读取文件 -> 稀疏数组 -> 二维数组 -> 棋盘 【接上局】")])])]),t._v(" "),_("li",[t._v("约瑟夫(Josephu)问题(丢手帕问题)\n"),_("ul",[_("li",[t._v("设编号为1，2，… n的n个人围坐一圈，约定编号为k（1<=k<=n）的人从1开始报数，数到m 的那个人出列，它的下一位又从1开始报数，数到m的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列")]),t._v(" "),_("li",[t._v("提示：用一个不带头结点的循环链表来处理Josephu 问题：先构成一个有n个结点的单循环链表（单向环形链表），然后由k结点起从1开始计数，计到m时，对应结点从链表中删除，然后再从被删除结点的下一个结点又从1开始计数，直到最后一个结点从链表中删除算法结束。")])])]),t._v(" "),_("li",[t._v("其他问题\n"),_("ul",[_("li",[t._v("修路问题  => 最小生成树(加权值)【数据结构】+ 普利姆算法")]),t._v(" "),_("li",[t._v("最短路径问题  => 图+弗洛伊德算法")]),t._v(" "),_("li",[t._v("汉诺塔 => 分支算法")]),t._v(" "),_("li",[t._v("八皇后问题 => 回溯法")])])])]),t._v(" "),_("h2",{attrs:{id:"数据结构分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据结构分类","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据结构分类")]),t._v(" "),_("ol",[_("li",[t._v("线性结构")]),t._v(" "),_("li",[t._v("非线性结构")])])])},[],!1,null,null,null);v.default=i.exports}}]);
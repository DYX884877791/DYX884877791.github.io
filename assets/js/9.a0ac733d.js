(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{206:function(t,e,a){t.exports=a.p+"assets/img/BIO.fa897370.png"},302:function(t,e,a){"use strict";a.r(e);var r=a(0),i=Object(r.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"bio"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#bio","aria-hidden":"true"}},[t._v("#")]),t._v(" BIO")]),t._v(" "),r("p",[t._v("JDK中最早存在的IO体系，传统的同步阻塞IO模型（Blocking IO），对应Java.io包，它提供了很多IO功能，比如输入输出流，对文件进行操作。在网络编程(Socket通信)中也同样进行IO操作。")]),t._v(" "),r("h2",{attrs:{id:"bio体系图解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#bio体系图解","aria-hidden":"true"}},[t._v("#")]),t._v(" BIO体系图解")]),t._v(" "),r("p",[r("img",{attrs:{src:a(206),alt:"BIO图解"}})]),t._v(" "),r("p",[t._v("传统的 IO 大致可以分为4种类型：")]),t._v(" "),r("ul",[r("li",[t._v("InputStream、OutputStream 基于字节操作的 IO")]),t._v(" "),r("li",[t._v("Writer、Reader 基于字符操作的 IO")]),t._v(" "),r("li",[t._v("File 基于磁盘操作的 IO")]),t._v(" "),r("li",[t._v("Socket 基于网络操作的 IO")])]),t._v(" "),r("p",[t._v("java.net 下提供的 Scoket 很多时候人们也把它归为 同步阻塞 IO ,因为网络通讯同样是 IO 行为。\njava.io 下的类和接口很多，但大体都是 InputStream、OutputStream、Writer、Reader 的子集，所有掌握这4个类和File的使用，是用好 IO 的关键。")])])},[],!1,null,null,null);e.default=i.exports}}]);